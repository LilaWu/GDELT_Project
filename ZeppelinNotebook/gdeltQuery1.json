{"paragraphs":[{"text":"// spark.cassandra.connection.host --> IP noeud cluster\n// spark.jars.packages --> datastax:spark-cassandra-connector:2.4.0-s_2.11","user":"anonymous","dateUpdated":"2020-01-22T15:03:50+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1579705100134_35170797","id":"20200122-145820_844911446","dateCreated":"2020-01-22T14:58:20+0000","dateStarted":"2020-01-22T15:03:50+0000","dateFinished":"2020-01-22T15:03:50+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:7954"},{"text":"import org.apache.spark.{SparkConf, SparkContext}\nimport org.apache.spark.sql.{DataFrame, SparkSession}\nimport org.apache.spark.input.PortableDataStream\nimport org.apache.spark.sql.functions._\nimport java.util.zip.ZipInputStream\nimport java.io.BufferedReader\nimport java.io.InputStreamReader\nimport com.datastax.spark.connector.cql.CassandraConnector\nimport org.apache.spark.sql.cassandra._\n\nimport org.apache.spark.rdd.RDD\n\nimport spark.implicits._\nval AWS_ID = \"ASIATATIKUDEE4HFY6OS\"\nval AWS_KEY = \"pEWi+o+3D1tiyc6hEpmMII7Gh0iy7AhtC+4H2ILd\"\nval AWS_TOKEN = \"FwoGZXIvYXdzEHgaDJq8YQHyZ9ioT1JHeyLMAVC88F029ni2mfXyosOyukektDc40tjhONK42011dyeRnWRy/gL7dZPUNwi2JkBTsMoAHTMX2EurAeqfozuHALUJs7lPB9Szo+VNPPP7hC/zcx9lYaSmbwVFPn5xta621R3dTaIyhR413ShQ4OVnsJWn8KR5K9Mk3OEcfn1/Lyv5kJnIcRkPbhH6LIp38HCSEno9T8lpLBEsqnFlV8PaU0sPRl1/RHetoQZSutYHoYXTjhdzXwan4aAjTbNka2cbawnIM/YvUmLsR0V1gSjZ/5bxBTItHO13d6tnAArCLtqyLGbjcPMLMMQUa3xkteIKC5gp/CshiLDVe7RyPr+kxrt5\"\nval s3_name = \"gael-sav-telecom-gdelt2019-new\"\n\nsc.hadoopConfiguration.set(\"fs.s3a.aws.credentials.provider\", \"org.apache.hadoop.fs.s3a.TemporaryAWSCredentialsProvider\")\nsc.hadoopConfiguration.set(\"fs.s3a.access.key\", AWS_ID)\nsc.hadoopConfiguration.set(\"fs.s3a.secret.key\", AWS_KEY)\nsc.hadoopConfiguration.set(\"fs.s3a.session.token\", AWS_TOKEN)\n\n\n\n// *** DOWNLOAD DATA ***\n\n// *** Events ***\nval textRDDEvents: RDD[String] = sc.binaryFiles(\"s3://\" + s3_name + \"/20181201*.export.CSV.zip\").\n   flatMap {  // decompresser les fichiers\n       case (name: String, content: PortableDataStream) =>\n          val zis = new ZipInputStream(content.open)\n          Stream.continually(zis.getNextEntry).\n                takeWhile{ case null => zis.close(); false\n            case _ => true }.\n                flatMap { _ =>\n                    val br = new BufferedReader(new InputStreamReader(zis))\n                    Stream.continually(br.readLine()).takeWhile(_ != null)\n                }\n    }\n\n// *** Mentions ***\nval textRDDMentions: RDD[String] = sc.binaryFiles(\"s3://\" + s3_name + \"/2018120105*.mentions.CSV.zip\").\n   flatMap {  // decompresser les fichiers\n       case (name: String, content: PortableDataStream) =>\n          val zis = new ZipInputStream(content.open)\n          Stream.continually(zis.getNextEntry).\n                takeWhile{ case null => zis.close(); false\n            case _ => true }.\n                flatMap { _ =>\n                    val br = new BufferedReader(new InputStreamReader(zis))\n                    Stream.continually(br.readLine()).takeWhile(_ != null)\n                }\n    }\n\n// *** Relation graph ***\nval textRDDRelations: RDD[String] = sc.binaryFiles(\"s3://\" + s3_name + \"/2018120105*.gkg.csv.zip\").\n   flatMap {  // decompresser les fichiers\n       case (name: String, content: PortableDataStream) =>\n          val zis = new ZipInputStream(content.open)\n          Stream.continually(zis.getNextEntry).\n                takeWhile{ case null => zis.close(); false\n            case _ => true }.\n                flatMap { _ =>\n                    val br = new BufferedReader(new InputStreamReader(zis))\n                    Stream.continually(br.readLine()).takeWhile(_ != null)\n                }\n    }\n\n\n// EVENTS\n\nval dfEventsRenamed: DataFrame = textRDDEvents.toDF.withColumn(\"GLOBALEVENTID\", split($\"value\", \"\\\\t\").getItem(0))\n.withColumn(\"Day\", split($\"value\", \"\\\\t\").getItem(1))\n.withColumn(\"MonthYear\", split($\"value\", \"\\\\t\").getItem(2))\n.withColumn(\"Year\", split($\"value\", \"\\\\t\").getItem(3))\n.withColumn(\"FractionDate\", split($\"value\", \"\\\\t\").getItem(4))\n.withColumn(\"Actor1Code\", split($\"value\", \"\\\\t\").getItem(5))\n.withColumn(\"Actor1Name\", split($\"value\", \"\\\\t\").getItem(6))\n.withColumn(\"Actor1CountryCode\", split($\"value\", \"\\\\t\").getItem(7))\n.withColumn(\"Actor1KnownGroupCode\", split($\"value\", \"\\\\t\").getItem(8))\n.withColumn(\"Actor1EthnicCode\", split($\"value\", \"\\\\t\").getItem(9))\n.withColumn(\"Actor1Religion1Code\", split($\"value\", \"\\\\t\").getItem(10))\n.withColumn(\"Actor1Religion2Code\", split($\"value\", \"\\\\t\").getItem(11))\n.withColumn(\"Actor1Type1Code\", split($\"value\", \"\\\\t\").getItem(12))\n.withColumn(\"Actor1Type2Code\", split($\"value\", \"\\\\t\").getItem(13))\n.withColumn(\"Actor1Type3Code\", split($\"value\", \"\\\\t\").getItem(14))\n.withColumn(\"Actor2Code\", split($\"value\", \"\\\\t\").getItem(15))\n.withColumn(\"Actor2Name\", split($\"value\", \"\\\\t\").getItem(16))\n.withColumn(\"Actor2CountryCode\", split($\"value\", \"\\\\t\").getItem(17))\n.withColumn(\"Actor2KnownGroupCode\", split($\"value\", \"\\\\t\").getItem(18))\n.withColumn(\"Actor2EthnicCode\", split($\"value\", \"\\\\t\").getItem(19))\n.withColumn(\"Actor2Religion1Code\", split($\"value\", \"\\\\t\").getItem(20))\n.withColumn(\"Actor2Religion2Code\", split($\"value\", \"\\\\t\").getItem(21))\n.withColumn(\"Actor2Type1Code\", split($\"value\", \"\\\\t\").getItem(22))\n.withColumn(\"Actor2Type2Code\", split($\"value\", \"\\\\t\").getItem(23))\n.withColumn(\"Actor2Type3Code\", split($\"value\", \"\\\\t\").getItem(24))\n.withColumn(\"IsRootEvent\", split($\"value\", \"\\\\t\").getItem(25))\n.withColumn(\"EventCode\", split($\"value\", \"\\\\t\").getItem(26))\n.withColumn(\"EventBaseCode\", split($\"value\", \"\\\\t\").getItem(27))\n.withColumn(\"EventRootCode\", split($\"value\", \"\\\\t\").getItem(28))\n.withColumn(\"QuadClass\", split($\"value\", \"\\\\t\").getItem(29))\n.withColumn(\"GoldsteinScale\", split($\"value\", \"\\\\t\").getItem(30))\n.withColumn(\"NumMentions\", split($\"value\", \"\\\\t\").getItem(31))\n.withColumn(\"NumSources\", split($\"value\", \"\\\\t\").getItem(32))\n.withColumn(\"NumArticles\", split($\"value\", \"\\\\t\").getItem(33))\n.withColumn(\"AvgTone\", split($\"value\", \"\\\\t\").getItem(34))\n.withColumn(\"Actor1Geo_Type\", split($\"value\", \"\\\\t\").getItem(35))\n.withColumn(\"Actor1Geo_FullName\", split($\"value\", \"\\\\t\").getItem(36))\n.withColumn(\"Actor1Geo_CountryCode\", split($\"value\", \"\\\\t\").getItem(37))\n.withColumn(\"Actor1Geo_ADM1Code\", split($\"value\", \"\\\\t\").getItem(38))\n.withColumn(\"Actor1Geo_ADM2Code\", split($\"value\", \"\\\\t\").getItem(39))\n.withColumn(\"Actor1Geo_Lat\", split($\"value\", \"\\\\t\").getItem(40))\n.withColumn(\"Actor1Geo_Long\", split($\"value\", \"\\\\t\").getItem(41))\n.withColumn(\"Actor1Geo_FeatureID\", split($\"value\", \"\\\\t\").getItem(42))\n.withColumn(\"Actor2Geo_Type\", split($\"value\", \"\\\\t\").getItem(43))\n.withColumn(\"Actor2Geo_FullName\", split($\"value\", \"\\\\t\").getItem(44))\n.withColumn(\"Actor2Geo_CountryCode\", split($\"value\", \"\\\\t\").getItem(45))\n.withColumn(\"Actor2Geo_ADM1Code\", split($\"value\", \"\\\\t\").getItem(46))\n.withColumn(\"Actor2Geo_ADM2Code\", split($\"value\", \"\\\\t\").getItem(47))\n.withColumn(\"Actor2Geo_Lat\", split($\"value\", \"\\\\t\").getItem(48))\n.withColumn(\"Actor2Geo_Long\", split($\"value\", \"\\\\t\").getItem(49))\n.withColumn(\"Actor2Geo_FeatureID\", split($\"value\", \"\\\\t\").getItem(50))\n.withColumn(\"ActionGeo_Type\", split($\"value\", \"\\\\t\").getItem(51))\n.withColumn(\"ActionGeo_FullName\", split($\"value\", \"\\\\t\").getItem(52))\n.withColumn(\"ActionGeo_CountryCode\", split($\"value\", \"\\\\t\").getItem(53))\n.withColumn(\"ActionGeo_ADM1Code\", split($\"value\", \"\\\\t\").getItem(54))\n.withColumn(\"ActionGeo_ADM2Code\", split($\"value\", \"\\\\t\").getItem(55))\n.withColumn(\"ActionGeo_Lat\", split($\"value\", \"\\\\t\").getItem(56))\n.withColumn(\"ActionGeo_Long\", split($\"value\", \"\\\\t\").getItem(57))\n.withColumn(\"ActionGeo_FeatureID\", split($\"value\", \"\\\\t\").getItem(58))\n.withColumn(\"DATEADDED\", split($\"value\", \"\\\\t\").getItem(59))\n.withColumn(\"SOURCEURL\", split($\"value\", \"\\\\t\").getItem(60))\n.drop(\"value\")\n\n// MENTIONS\nval dfMentionsRenamed: DataFrame = textRDDMentions.toDF.withColumn(\"GLOBALEVENTID\", split($\"value\", \"\\\\t\").getItem(0))\n.withColumn(\"GLOBALEVENTID\", split($\"value\", \"\\\\t\").getItem(0))\n.withColumn(\"EventTimeDate\", split($\"value\", \"\\\\t\").getItem(1))\n.withColumn(\"MentionTimeDate\", split($\"value\", \"\\\\t\").getItem(2))\n.withColumn(\"MentionType\", split($\"value\", \"\\\\t\").getItem(3))\n.withColumn(\"MentionSourceName\", split($\"value\", \"\\\\t\").getItem(4))\n.withColumn(\"MentionIdentifier\", split($\"value\", \"\\\\t\").getItem(5))\n.withColumn(\"SentenceID\", split($\"value\", \"\\\\t\").getItem(6))\n.withColumn(\"Actor1CharOffset\", split($\"value\", \"\\\\t\").getItem(7))\n.withColumn(\"Actor2CharOffset\", split($\"value\", \"\\\\t\").getItem(8))\n.withColumn(\"ActionCharOffset\", split($\"value\", \"\\\\t\").getItem(9))\n.withColumn(\"InRawText\", split($\"value\", \"\\\\t\").getItem(10))\n.withColumn(\"Confidence\", split($\"value\", \"\\\\t\").getItem(11))\n.withColumn(\"MentionDocLen\", split($\"value\", \"\\\\t\").getItem(12))\n.withColumn(\"MentionDocTone\", split($\"value\", \"\\\\t\").getItem(13))\n.withColumn(\"MentionDocTranslationInfo\", split($\"value\", \"\\\\t\").getItem(14))\n.withColumn(\"Extras\", split($\"value\", \"\\\\t\").getItem(15))\n.drop(\"value\")","user":"anonymous","dateUpdated":"2020-01-22T15:09:58+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.{SparkConf, SparkContext}\nimport org.apache.spark.sql.{DataFrame, SparkSession}\nimport org.apache.spark.input.PortableDataStream\nimport org.apache.spark.sql.functions._\nimport java.util.zip.ZipInputStream\nimport java.io.BufferedReader\nimport java.io.InputStreamReader\nimport com.datastax.spark.connector.cql.CassandraConnector\nimport org.apache.spark.sql.cassandra._\nimport org.apache.spark.rdd.RDD\nimport spark.implicits._\nAWS_ID: String = ASIATATIKUDEE4HFY6OS\nAWS_KEY: String = pEWi+o+3D1tiyc6hEpmMII7Gh0iy7AhtC+4H2ILd\nAWS_TOKEN: String = FwoGZXIvYXdzEHgaDJq8YQHyZ9ioT1JHeyLMAVC88F029ni2mfXyosOyukektDc40tjhONK42011dyeRnWRy/gL7dZPUNwi2JkBTsMoAHTMX2EurAeqfozuHALUJs7lPB9Szo+VNPPP7hC/zcx9lYaSmbwVFPn5xta621R3dTaIyhR413ShQ4OVnsJWn8KR5K9Mk3OEcfn1/Lyv5kJnIcRkPbhH6LIp38HCSEno9..."}]},"apps":[],"jobName":"paragraph_1579704670089_1545121532","id":"20200120-075429_773920994","dateCreated":"2020-01-22T14:51:10+0000","dateStarted":"2020-01-22T15:03:51+0000","dateFinished":"2020-01-22T15:03:55+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:7955"},{"text":"val dfEventsForJoin = dfEventsRenamed.select(\"GLOBALEVENTID\",\"DAY\",\"Actor1CountryCode\")\nval dfMentionsForJoin = dfMentionsRenamed.select(\"GLOBALEVENTID\",\"MentionDocTranslationInfo\")","user":"anonymous","dateUpdated":"2020-01-22T15:03:55+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"dfEventsForJoin: org.apache.spark.sql.DataFrame = [GLOBALEVENTID: string, DAY: string ... 1 more field]\ndfMentionsForJoin: org.apache.spark.sql.DataFrame = [GLOBALEVENTID: string, MentionDocTranslationInfo: string]\n"}]},"apps":[],"jobName":"paragraph_1579704670097_1168042098","id":"20200120-091654_2139418060","dateCreated":"2020-01-22T14:51:10+0000","dateStarted":"2020-01-22T15:03:55+0000","dateFinished":"2020-01-22T15:03:55+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:7956"},{"text":"val dfJoin = dfEventsForJoin.join(dfMentionsForJoin, Seq(\"GLOBALEVENTID\"))","user":"anonymous","dateUpdated":"2020-01-22T15:03:55+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"dfJoin: org.apache.spark.sql.DataFrame = [GLOBALEVENTID: string, DAY: string ... 2 more fields]\n"}]},"apps":[],"jobName":"paragraph_1579704670098_1138802669","id":"20200120-085547_1870761692","dateCreated":"2020-01-22T14:51:10+0000","dateStarted":"2020-01-22T15:03:56+0000","dateFinished":"2020-01-22T15:03:56+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:7957"},{"text":"val dfGroup = dfJoin\n.groupBy(\"DAY\", \"Actor1CountryCode\", \"MentionDocTranslationInfo\")\n.agg(count(\"GLOBALEVENTID\").alias(\"count_events\"))\n.withColumnRenamed(\"DAY\",\"date\")\n.withColumnRenamed(\"Actor1CountryCode\", \"country\")\n.withColumnRenamed(\"MentionDocTranslationInfo\", \"language_0\")","user":"anonymous","dateUpdated":"2020-01-22T15:03:56+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"dfGroup: org.apache.spark.sql.DataFrame = [date: string, country: string ... 2 more fields]\n"}]},"apps":[],"jobName":"paragraph_1579704670098_-1425210527","id":"20200120-085758_443214465","dateCreated":"2020-01-22T14:51:10+0000","dateStarted":"2020-01-22T15:03:56+0000","dateFinished":"2020-01-22T15:03:57+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:7958"},{"text":"def preprocessLanguages(s: String): String = {\n    if(s == \"\") {\n        \"eng\"\n    } else {\n        s.split(\";\")(0).split(\":\")(1)\n    }\n}\n\nval preprocessLanguagesUDF = udf(preprocessLanguages _)","user":"anonymous","dateUpdated":"2020-01-22T15:03:57+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"preprocessLanguages: (s: String)String\npreprocessLanguagesUDF: org.apache.spark.sql.expressions.UserDefinedFunction = UserDefinedFunction(<function1>,StringType,Some(List(StringType)))\n"}]},"apps":[],"jobName":"paragraph_1579704670098_1476383601","id":"20200120-153320_1477346658","dateCreated":"2020-01-22T14:51:10+0000","dateStarted":"2020-01-22T15:03:57+0000","dateFinished":"2020-01-22T15:03:58+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:7959"},{"text":"val dfLanguagePreproc = dfGroup.withColumn(\"language\", preprocessLanguagesUDF($\"language_0\")).drop(\"language_0\")","user":"anonymous","dateUpdated":"2020-01-22T15:03:58+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"dfLanguagePreproc: org.apache.spark.sql.DataFrame = [date: string, country: string ... 2 more fields]\n"}]},"apps":[],"jobName":"paragraph_1579704670099_1855913482","id":"20200120-152831_854135524","dateCreated":"2020-01-22T14:51:10+0000","dateStarted":"2020-01-22T15:03:58+0000","dateFinished":"2020-01-22T15:03:58+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:7960"},{"text":"val reorderedColumnNames = Array(\"date\",\"country\",\"language\",\"count_events\")\nval dfReordered = dfLanguagePreproc.select(reorderedColumnNames.head, reorderedColumnNames.tail: _*)","user":"anonymous","dateUpdated":"2020-01-22T15:03:58+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"reorderedColumnNames: Array[String] = Array(date, country, language, count_events)\ndfReordered: org.apache.spark.sql.DataFrame = [date: string, country: string ... 2 more fields]\n"}]},"apps":[],"jobName":"paragraph_1579704670099_-626516944","id":"20200120-160213_2094187620","dateCreated":"2020-01-22T14:51:10+0000","dateStarted":"2020-01-22T15:03:58+0000","dateFinished":"2020-01-22T15:03:59+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:7961"},{"text":"CassandraConnector(sc.getConf).withSessionDo { session =>\n      session.execute(\n        \"\"\"\n           CREATE KEYSPACE IF NOT EXISTS gdelt\n           WITH REPLICATION =\n           {'class': 'SimpleStrategy', 'replication_factor': 2 };\n        \"\"\")\n        session.execute(\n        \"\"\"\n           CREATE TABLE IF NOT EXISTS gdelt.event_by_day (\n              date text,\n              country text,\n              language text,\n              count_events int,\n              PRIMARY KEY (date, country, language)\n            );\n        \"\"\"\n      )\n}","user":"anonymous","dateUpdated":"2020-01-22T15:03:59+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res7: com.datastax.driver.core.ResultSet = ResultSet[ exhausted: true, Columns[]]\n"}]},"apps":[],"jobName":"paragraph_1579704670100_-647707470","id":"20200120-081737_507399515","dateCreated":"2020-01-22T14:51:10+0000","dateStarted":"2020-01-22T15:04:00+0000","dateFinished":"2020-01-22T15:04:00+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:7962"},{"text":"dfReordered.write\n      .cassandraFormat(\"event_by_day\", \"gdelt\")\n      .save()","user":"anonymous","dateUpdated":"2020-01-22T15:04:00+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1579704670101_-1304661999","id":"20200120-080331_1066883387","dateCreated":"2020-01-22T14:51:10+0000","dateStarted":"2020-01-22T15:04:00+0000","dateFinished":"2020-01-22T15:05:06+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:7963"},{"text":"val query1 = spark.read\n      .cassandraFormat(\"event_by_day\", \"gdelt\")\n      .load()","user":"anonymous","dateUpdated":"2020-01-22T15:08:07+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"query1: org.apache.spark.sql.DataFrame = [date: string, country: string ... 2 more fields]\n"}]},"apps":[],"jobName":"paragraph_1579704670102_-2002914128","id":"20200120-090627_1619175767","dateCreated":"2020-01-22T14:51:10+0000","dateStarted":"2020-01-22T15:08:07+0000","dateFinished":"2020-01-22T15:08:08+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:7964"},{"text":"query1.show(10)","user":"anonymous","dateUpdated":"2020-01-22T15:08:27+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------+-------+--------+------------+\n|    date|country|language|count_events|\n+--------+-------+--------+------------+\n|20181201|       |     ara|         263|\n|20181201|       |     axe|           3|\n|20181201|       |     ben|          35|\n|20181201|       |     bul|          11|\n|20181201|       |     cat|           2|\n|20181201|       |     ces|          19|\n|20181201|       |     dan|          13|\n|20181201|       |     deu|          99|\n|20181201|       |     ell|          26|\n|20181201|       |     eng|        7787|\n+--------+-------+--------+------------+\nonly showing top 10 rows\n\n"}]},"apps":[],"jobName":"paragraph_1579705506292_2045672626","id":"20200122-150506_612889581","dateCreated":"2020-01-22T15:05:06+0000","dateStarted":"2020-01-22T15:08:27+0000","dateFinished":"2020-01-22T15:08:43+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:7965"},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1579705707574_-1804782337","id":"20200122-150827_1135680860","dateCreated":"2020-01-22T15:08:27+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:7966"}],"name":"gdeltQuery1","id":"2EZN96H5Z","noteParams":{},"noteForms":{},"angularObjects":{"md:shared_process":[],"python:shared_process":[],"angular:shared_process":[],"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}