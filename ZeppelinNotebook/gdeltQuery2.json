{"paragraphs":[{"text":"%md\n## Query 2\nHere we will try to resolve the following query:\n\npour un pays donné en paramètre, affichez les évènements qui y ont eu place triées par le nombre de mentions (tri décroissant); permettez une agrégation par jour/mois/année\n","user":"anonymous","dateUpdated":"2020-01-22T14:54:11+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Query 2</h2>\n<p>Here we will try to resolve the following query:</p>\n<p>pour un pays donné en paramètre, affichez les évènements qui y ont eu place triées par le nombre de mentions (tri décroissant); permettez une agrégation par jour/mois/année</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1579704052233_-214211633","id":"20181212-102323_67420128","dateCreated":"2020-01-22T14:40:52+0000","dateStarted":"2020-01-22T14:54:11+0000","dateFinished":"2020-01-22T14:54:11+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:2078"},{"text":"%md Edit the interpreter spark (top right drop down menu) and add those two variables:\n```\nspark.jars.packages                         datastax:spark-cassandra-connector:2.4.0-s_2.11\nspark.cassandra.connection.host             private-ip-cassandra-node-1,private-ip-cassandra-node-2 \n```","user":"anonymous","dateUpdated":"2020-01-22T14:54:11+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Edit the interpreter spark (top right drop down menu) and add those two variables:</p>\n<pre><code>spark.jars.packages                         datastax:spark-cassandra-connector:2.4.0-s_2.11\nspark.cassandra.connection.host             private-ip-cassandra-node-1,private-ip-cassandra-node-2 \n</code></pre>\n</div>"}]},"apps":[],"jobName":"paragraph_1579704052240_-309574833","id":"20200119-122507_1982817269","dateCreated":"2020-01-22T14:40:52+0000","dateStarted":"2020-01-22T14:54:11+0000","dateFinished":"2020-01-22T14:54:11+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2079"},{"text":"val AWS_ID = \"ASIA45PGNWCT5D5HIUUJ\"\nval AWS_KEY = \"NQywB/btUgnFm1AsvN5eMfEHu5xrGwxZi049j+FT\"\nval AWS_TOKEN = \"FwoGZXIvYXdzEKj//////////wEaDOtu60JwJxNN5YqBJyLBAbUImtx4tRHhgm1mYmBEeeaSpu5IDhDToP00udFEnSGN2MDEWJOqMzEq/Ok88M3ePjC/FW/KePeRKiIdpUihCxPIG4qQKx5wzqV+9+bTI7rnahHff1R74/iqVF0Gfy/p5Ocj0zDYvNbJ5z4xBZPUmXcwpyO6KB8dy6d3lLHOzNmtPOoNbgrTxYH5ILJVX7289sdYGzCJwQrpUDkI3QhDJEjc6mLFub2Jt+h/Zclokun6kkJK+KbHbjqson4Q+LaM15covLmh8QUyLc/mZXn3vzz+W/C18ZUTxoMl+RTdNcigL6uTCEjjzzDQZ9dSbqti9beSVkvtXQ==\"\nval s3_name = \"elattaoui-farid-telecom-gdelt-project-2019\"\n\n\n\nsc.hadoopConfiguration.set(\"fs.s3a.aws.credentials.provider\", \"org.apache.hadoop.fs.s3a.TemporaryAWSCredentialsProvider\")\nsc.hadoopConfiguration.set(\"fs.s3a.access.key\", AWS_ID) // mettre votre ID du fichier credentials.csv\nsc.hadoopConfiguration.set(\"fs.s3a.secret.key\", AWS_KEY) // mettre votre secret du fichier credentials.csv\nsc.hadoopConfiguration.set(\"fs.s3a.session.token\", AWS_TOKEN)","user":"anonymous","dateUpdated":"2020-01-22T14:54:11+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"AWS_ID: String = ASIA45PGNWCT5D5HIUUJ\nAWS_KEY: String = NQywB/btUgnFm1AsvN5eMfEHu5xrGwxZi049j+FT\nAWS_TOKEN: String = FwoGZXIvYXdzEKj//////////wEaDOtu60JwJxNN5YqBJyLBAbUImtx4tRHhgm1mYmBEeeaSpu5IDhDToP00udFEnSGN2MDEWJOqMzEq/Ok88M3ePjC/FW/KePeRKiIdpUihCxPIG4qQKx5wzqV+9+bTI7rnahHff1R74/iqVF0Gfy/p5Ocj0zDYvNbJ5z4xBZPUmXcwpyO6KB8dy6d3lLHOzNmtPOoNbgrTxYH5ILJVX7289sdYGzCJwQrpUDkI3QhDJEjc6mLFub2Jt+h/Zclokun6kkJK+KbHbjqson4Q+LaM15covLmh8QUyLc/mZXn3vzz+W/C18ZUTxoMl+RTdNcigL6uTCEjjzzDQZ9dSbqti9beSVkvtXQ==\ns3_name: String = elattaoui-farid-telecom-gdelt-project-2019\n"}]},"apps":[],"jobName":"paragraph_1579704052240_635015234","id":"20171217-230735_1688540039","dateCreated":"2020-01-22T14:40:52+0000","dateStarted":"2020-01-22T14:54:11+0000","dateFinished":"2020-01-22T14:54:12+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2080"},{"text":"%md Exportation of the Tables Events and Mentions","user":"anonymous","dateUpdated":"2020-01-22T14:54:12+0000","config":{"tableHide":true,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Exportation of the Tables Events and Mentions</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1579704052241_-377360922","id":"20200117-103749_1442620581","dateCreated":"2020-01-22T14:40:52+0000","dateStarted":"2020-01-22T14:54:12+0000","dateFinished":"2020-01-22T14:54:12+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2081"},{"text":"import org.apache.spark.{SparkConf, SparkContext}\nimport org.apache.spark.sql.{DataFrame, SparkSession}\nimport org.apache.spark.input.PortableDataStream\nimport org.apache.spark.sql.functions._\nimport java.util.zip.ZipInputStream\nimport java.io.BufferedReader\nimport java.io.InputStreamReader\n\nimport org.apache.spark.rdd.RDD\n\n\n    val textRDDEvents: RDD[String] = sc.binaryFiles(\"s3://\" + s3_name + \"/2018120105*.export.CSV.zip\").\n      flatMap { // decompresser les fichiers\n        case (name: String, content: PortableDataStream) =>\n          val zis = new ZipInputStream(content.open)\n          Stream.continually(zis.getNextEntry).\n            takeWhile(_ != null).\n            flatMap { _ =>\n              val br = new BufferedReader(new InputStreamReader(zis))\n              Stream.continually(br.readLine()).takeWhile(_ != null)\n            }\n      }\n\n    // *** Mentions ***\n    val textRDDMentions: RDD[String] = sc.binaryFiles(\"s3://\" + s3_name + \"/2018120105*.mentions.CSV.zip\").\n      flatMap { // decompresser les fichiers\n        case (name: String, content: PortableDataStream) =>\n          val zis = new ZipInputStream(content.open)\n          Stream.continually(zis.getNextEntry).\n            takeWhile(_ != null).\n            flatMap { _ =>\n              val br = new BufferedReader(new InputStreamReader(zis))\n              Stream.continually(br.readLine()).takeWhile(_ != null)\n            }\n      }\n\n    /** ************************************************************\n     * Ajout des informations colonnes et creation de deux Dataframe\n     * ************************************************************* */\n\n    // EVENTS\n\n    val dfEvents: DataFrame = textRDDEvents.toDF.withColumn(\"GLOBALEVENTID\", split($\"value\", \"\\\\t\").getItem(0))\n      .withColumn(\"Day\", split($\"value\", \"\\\\t\").getItem(1))\n      .withColumn(\"MonthYear\", split($\"value\", \"\\\\t\").getItem(2))\n      .withColumn(\"Year\", split($\"value\", \"\\\\t\").getItem(3))\n      .withColumn(\"FractionDate\", split($\"value\", \"\\\\t\").getItem(4))\n      .withColumn(\"Actor1Code\", split($\"value\", \"\\\\t\").getItem(5))\n      .withColumn(\"Actor1Name\", split($\"value\", \"\\\\t\").getItem(6))\n      .withColumn(\"Actor1CountryCode\", split($\"value\", \"\\\\t\").getItem(7))\n      .withColumn(\"Actor1KnownGroupCode\", split($\"value\", \"\\\\t\").getItem(8))\n      .withColumn(\"Actor1EthnicCode\", split($\"value\", \"\\\\t\").getItem(9))\n      .withColumn(\"Actor1Religion1Code\", split($\"value\", \"\\\\t\").getItem(10))\n      .withColumn(\"Actor1Religion2Code\", split($\"value\", \"\\\\t\").getItem(11))\n      .withColumn(\"Actor1Type1Code\", split($\"value\", \"\\\\t\").getItem(12))\n      .withColumn(\"Actor1Type2Code\", split($\"value\", \"\\\\t\").getItem(13))\n      .withColumn(\"Actor1Type3Code\", split($\"value\", \"\\\\t\").getItem(14))\n      .withColumn(\"Actor2Code\", split($\"value\", \"\\\\t\").getItem(15))\n      .withColumn(\"Actor2Name\", split($\"value\", \"\\\\t\").getItem(16))\n      .withColumn(\"Actor2CountryCode\", split($\"value\", \"\\\\t\").getItem(17))\n      .withColumn(\"Actor2KnownGroupCode\", split($\"value\", \"\\\\t\").getItem(18))\n      .withColumn(\"Actor2EthnicCode\", split($\"value\", \"\\\\t\").getItem(19))\n      .withColumn(\"Actor2Religion1Code\", split($\"value\", \"\\\\t\").getItem(20))\n      .withColumn(\"Actor2Religion2Code\", split($\"value\", \"\\\\t\").getItem(21))\n      .withColumn(\"Actor2Type1Code\", split($\"value\", \"\\\\t\").getItem(22))\n      .withColumn(\"Actor2Type2Code\", split($\"value\", \"\\\\t\").getItem(23))\n      .withColumn(\"Actor2Type3Code\", split($\"value\", \"\\\\t\").getItem(24))\n      .withColumn(\"IsRootEvent\", split($\"value\", \"\\\\t\").getItem(25))\n      .withColumn(\"EventCode\", split($\"value\", \"\\\\t\").getItem(26))\n      .withColumn(\"EventBaseCode\", split($\"value\", \"\\\\t\").getItem(27))\n      .withColumn(\"EventRootCode\", split($\"value\", \"\\\\t\").getItem(28))\n      .withColumn(\"QuadClass\", split($\"value\", \"\\\\t\").getItem(29))\n      .withColumn(\"GoldsteinScale\", split($\"value\", \"\\\\t\").getItem(30))\n      .withColumn(\"NumMentions\", split($\"value\", \"\\\\t\").getItem(31))\n      .withColumn(\"NumSources\", split($\"value\", \"\\\\t\").getItem(32))\n      .withColumn(\"NumArticles\", split($\"value\", \"\\\\t\").getItem(33))\n      .withColumn(\"AvgTone\", split($\"value\", \"\\\\t\").getItem(34))\n      .withColumn(\"Actor1Geo_Type\", split($\"value\", \"\\\\t\").getItem(35))\n      .withColumn(\"Actor1Geo_FullName\", split($\"value\", \"\\\\t\").getItem(36))\n      .withColumn(\"Actor1Geo_CountryCode\", split($\"value\", \"\\\\t\").getItem(37))\n      .withColumn(\"Actor1Geo_ADM1Code\", split($\"value\", \"\\\\t\").getItem(38))\n      .withColumn(\"Actor1Geo_ADM2Code\", split($\"value\", \"\\\\t\").getItem(39))\n      .withColumn(\"Actor1Geo_Lat\", split($\"value\", \"\\\\t\").getItem(40))\n      .withColumn(\"Actor1Geo_Long\", split($\"value\", \"\\\\t\").getItem(41))\n      .withColumn(\"Actor1Geo_FeatureID\", split($\"value\", \"\\\\t\").getItem(42))\n      .withColumn(\"Actor2Geo_Type\", split($\"value\", \"\\\\t\").getItem(43))\n      .withColumn(\"Actor2Geo_FullName\", split($\"value\", \"\\\\t\").getItem(44))\n      .withColumn(\"Actor2Geo_CountryCode\", split($\"value\", \"\\\\t\").getItem(45))\n      .withColumn(\"Actor2Geo_ADM1Code\", split($\"value\", \"\\\\t\").getItem(46))\n      .withColumn(\"Actor2Geo_ADM2Code\", split($\"value\", \"\\\\t\").getItem(47))\n      .withColumn(\"Actor2Geo_Lat\", split($\"value\", \"\\\\t\").getItem(48))\n      .withColumn(\"Actor2Geo_Long\", split($\"value\", \"\\\\t\").getItem(49))\n      .withColumn(\"Actor2Geo_FeatureID\", split($\"value\", \"\\\\t\").getItem(50))\n      .withColumn(\"ActionGeo_Type\", split($\"value\", \"\\\\t\").getItem(51))\n      .withColumn(\"ActionGeo_FullName\", split($\"value\", \"\\\\t\").getItem(52))\n      .withColumn(\"ActionGeo_CountryCode\", split($\"value\", \"\\\\t\").getItem(53))\n      .withColumn(\"ActionGeo_ADM1Code\", split($\"value\", \"\\\\t\").getItem(54))\n      .withColumn(\"ActionGeo_ADM2Code\", split($\"value\", \"\\\\t\").getItem(55))\n      .withColumn(\"ActionGeo_Lat\", split($\"value\", \"\\\\t\").getItem(56))\n      .withColumn(\"ActionGeo_Long\", split($\"value\", \"\\\\t\").getItem(57))\n      .withColumn(\"ActionGeo_FeatureID\", split($\"value\", \"\\\\t\").getItem(58))\n      .withColumn(\"DATEADDED\", split($\"value\", \"\\\\t\").getItem(59))\n      .withColumn(\"SOURCEURL\", split($\"value\", \"\\\\t\").getItem(60))\n      .drop(\"value\")\n\n    // MENTIONS\n    val dfMentions: DataFrame = textRDDMentions.toDF.withColumn(\"GLOBALEVENTID\", split($\"value\", \"\\\\t\").getItem(0))\n      .withColumn(\"EventTimeDate\", split($\"value\", \"\\\\t\").getItem(1))\n      .withColumn(\"MentionTimeDate\", split($\"value\", \"\\\\t\").getItem(2))\n      .withColumn(\"MentionType\", split($\"value\", \"\\\\t\").getItem(3))\n      .withColumn(\"MentionSourceName\", split($\"value\", \"\\\\t\").getItem(4))\n      .withColumn(\"MentionIdentifier\", split($\"value\", \"\\\\t\").getItem(5))\n      .withColumn(\"SentenceID\", split($\"value\", \"\\\\t\").getItem(6))\n      .withColumn(\"Actor1CharOffset\", split($\"value\", \"\\\\t\").getItem(7))\n      .withColumn(\"Actor2CharOffset\", split($\"value\", \"\\\\t\").getItem(8))\n      .withColumn(\"ActionCharOffset\", split($\"value\", \"\\\\t\").getItem(9))\n      .withColumn(\"InRawText\", split($\"value\", \"\\\\t\").getItem(10))\n      .withColumn(\"Confidence\", split($\"value\", \"\\\\t\").getItem(11))\n      .withColumn(\"MentionDocLen\", split($\"value\", \"\\\\t\").getItem(12))\n      .withColumn(\"MentionDocTone\", split($\"value\", \"\\\\t\").getItem(13))\n      .withColumn(\"MentionDocTranslationInfo\", split($\"value\", \"\\\\t\").getItem(14))\n      .withColumn(\"Extras\", split($\"value\", \"\\\\t\").getItem(15))\n      .drop(\"value\")\n      \n    val dfJoin = dfEvents.join(dfMentions, Seq(\"GLOBALEVENTID\"),\"left\")","user":"anonymous","dateUpdated":"2020-01-22T14:54:12+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.{SparkConf, SparkContext}\nimport org.apache.spark.sql.{DataFrame, SparkSession}\nimport org.apache.spark.input.PortableDataStream\nimport org.apache.spark.sql.functions._\nimport java.util.zip.ZipInputStream\nimport java.io.BufferedReader\nimport java.io.InputStreamReader\nimport org.apache.spark.rdd.RDD\ntextRDDEvents: org.apache.spark.rdd.RDD[String] = MapPartitionsRDD[45] at flatMap at <console>:84\ntextRDDMentions: org.apache.spark.rdd.RDD[String] = MapPartitionsRDD[47] at flatMap at <console>:97\ndfEvents: org.apache.spark.sql.DataFrame = [GLOBALEVENTID: string, Day: string ... 59 more fields]\ndfMentions: org.apache.spark.sql.DataFrame = [GLOBALEVENTID: string, EventTimeDate: string ... 14 more fields]\ndfJoin: org.apache.spark.sql.DataFrame = [GLOBALEVENTID: string, ..."}]},"apps":[],"jobName":"paragraph_1579704052242_2005085495","id":"20200117-103556_2139418060","dateCreated":"2020-01-22T14:40:52+0000","dateStarted":"2020-01-22T14:54:12+0000","dateFinished":"2020-01-22T14:54:16+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2082"},{"text":"    val dfPays_Events = dfJoin.select(\"GLOBALEVENTID\",\"ActionGeo_CountryCode\", \"Day\")\n      .groupBy(\"ActionGeo_CountryCode\",\"Day\",\"GLOBALEVENTID\")\n      .agg(count($\"GLOBALEVENTID\").alias(\"num_mentions\"))\n      .orderBy($\"num_mentions\".desc)\n\n    dfPays_Events.show(25)","user":"anonymous","dateUpdated":"2020-01-22T15:10:59+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---------------------+--------+-------------+------------+\n|ActionGeo_CountryCode|     Day|GLOBALEVENTID|num_mentions|\n+---------------------+--------+-------------+------------+\n|                   US|20181201|    806818336|          20|\n|                   MX|20181201|    806818335|          19|\n|                   US|20181201|    806818354|          19|\n|                   US|20181201|    806818353|          19|\n|                   EN|20181201|    806813940|          17|\n|                   US|20181201|    806820357|          16|\n|                   US|20181201|    806815979|          14|\n|                   SY|20181201|    806817662|          14|\n|                   AR|20181201|    806817406|          14|\n|                   SY|20181201|    806818315|          14|\n|                   AR|20181201|    806817405|          14|\n|                   AR|20181201|    806818182|          14|\n|                   AR|20181201|    806818183|          14|\n|                   US|20181201|    806815978|          14|\n|                   SY|20181201|    806817656|          14|\n|                   US|20181201|    806818332|          12|\n|                   SP|20181201|    806817326|          12|\n|                   SA|20181201|    806820240|          11|\n|                   AR|20181201|    806817655|          11|\n|                   FR|20181201|    806819642|          11|\n|                   UK|20181201|    806819660|          11|\n|                   SA|20181201|    806819765|          11|\n|                   US|20181201|    806820484|          11|\n|                   SA|20181201|    806819764|          11|\n|                   FR|20181201|    806819633|          11|\n+---------------------+--------+-------------+------------+\nonly showing top 25 rows\n\ndfPays_Events: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [ActionGeo_CountryCode: string, Day: string ... 2 more fields]\n"}]},"apps":[],"jobName":"paragraph_1579704052243_-442876643","id":"20200120-145114_877903678","dateCreated":"2020-01-22T14:40:52+0000","dateStarted":"2020-01-22T15:10:59+0000","dateFinished":"2020-01-22T15:11:19+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2083"},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1579706157167_-1672389785","id":"20200122-151557_1100523327","dateCreated":"2020-01-22T15:15:57+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:3909","text":"    val dfPays_Events = dfJoin.select(\"GLOBALEVENTID\",\"ActionGeo_CountryCode\", \"Day\")\n      .withColumn(\"year\", substring($\"Day\", 0, 4))\n      .withColumn(\"month\", substring($\"Day\", 5, 2))\n      .withColumn(\"day\", substring($\"Day\", 7, 2))\n      .groupBy(\"ActionGeo_CountryCode\",\"GLOBALEVENTID\",\"year\", \"month\", \"day\")\n      .agg(count($\"GLOBALEVENTID\").alias(\"num_mentions\"))\n      .orderBy($\"num_mentions\".desc)\n     \n     dfPays_Events.show(25)","dateUpdated":"2020-01-22T15:25:11+0000","dateFinished":"2020-01-22T15:25:21+0000","dateStarted":"2020-01-22T15:25:12+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---------------------+-------------+----+-----+---+------------+\n|ActionGeo_CountryCode|GLOBALEVENTID|year|month|day|num_mentions|\n+---------------------+-------------+----+-----+---+------------+\n|                   US|    806818336|2018|   12| 01|          20|\n|                   MX|    806818335|2018|   12| 01|          19|\n|                   US|    806818354|2018|   12| 01|          19|\n|                   US|    806818353|2018|   12| 01|          19|\n|                   EN|    806813940|2018|   12| 01|          17|\n|                   US|    806820357|2018|   12| 01|          16|\n|                   AR|    806818183|2018|   12| 01|          14|\n|                   AR|    806817405|2018|   12| 01|          14|\n|                   SY|    806817656|2018|   12| 01|          14|\n|                   AR|    806818182|2018|   12| 01|          14|\n|                   US|    806815979|2018|   12| 01|          14|\n|                   SY|    806817662|2018|   12| 01|          14|\n|                   US|    806815978|2018|   12| 01|          14|\n|                   SY|    806818315|2018|   12| 01|          14|\n|                   AR|    806817406|2018|   12| 01|          14|\n|                   SP|    806817326|2018|   12| 01|          12|\n|                   US|    806818332|2018|   12| 01|          12|\n|                   AR|    806817661|2018|   12| 01|          11|\n|                   FR|    806819642|2018|   12| 01|          11|\n|                   UK|    806820486|2018|   12| 01|          11|\n|                   AR|    806817655|2018|   12| 01|          11|\n|                   US|    806820484|2018|   12| 01|          11|\n|                   AR|    806818178|2018|   12| 01|          11|\n|                   UK|    806819660|2018|   12| 01|          11|\n|                   US|    806819766|2018|   12| 01|          11|\n+---------------------+-------------+----+-----+---+------------+\nonly showing top 25 rows\n\ndfPays_Events: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [ActionGeo_CountryCode: string, GLOBALEVENTID: string ... 4 more fields]\n"}]}},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1579705533128_-1475845310","id":"20200122-150533_419453088","dateCreated":"2020-01-22T15:05:33+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:3362","text":"val dfPays_Events = dfEvents.select(\"GLOBALEVENTID\",\"ActionGeo_CountryCode\", \"Day\")\n      .filter(!($\"ActionGeo_CountryCode\".isNaN || $\"ActionGeo_CountryCode\".isNull || $\"ActionGeo_CountryCode\" === \"\"))\n      .join(\n        dfMentions.select(\"GLOBALEVENTID\"), \"GLOBALEVENTID\")\n      .withColumn(\"year\", substring($\"Day\", 0, 4))\n      .withColumn(\"month\", substring($\"Day\", 5, 2))\n      .withColumn(\"day\", substring($\"Day\", 7, 2))\n      .groupBy(\"ActionGeo_CountryCode\",\"GLOBALEVENTID\",\"year\", \"month\", \"day\")\n      .agg(count($\"GLOBALEVENTID\").alias(\"num_mentions\"))\n      .orderBy($\"num_mentions\".desc)\n      \n     ","dateUpdated":"2020-01-22T15:28:05+0000","dateFinished":"2020-01-22T15:15:23+0000","dateStarted":"2020-01-22T15:15:02+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---------------------+--------+-------------+------------+\n|ActionGeo_CountryCode|     Day|GLOBALEVENTID|num_mentions|\n+---------------------+--------+-------------+------------+\n|                   US|20181201|    806818336|          20|\n|                   US|20181201|    806818354|          19|\n|                   MX|20181201|    806818335|          19|\n|                   US|20181201|    806818353|          19|\n|                   EN|20181201|    806813940|          17|\n|                   US|20181201|    806820357|          16|\n|                   AR|20181201|    806818183|          14|\n|                   US|20181201|    806815979|          14|\n|                   SY|20181201|    806818315|          14|\n|                   AR|20181201|    806817405|          14|\n|                   AR|20181201|    806818182|          14|\n|                   SY|20181201|    806817662|          14|\n|                   AR|20181201|    806817406|          14|\n|                   US|20181201|    806815978|          14|\n|                   SY|20181201|    806817656|          14|\n|                   SP|20181201|    806817326|          12|\n|                   US|20181201|    806818332|          12|\n|                   AR|20181201|    806818178|          11|\n|                   AR|20181201|    806817661|          11|\n|                   UK|20181201|    806820486|          11|\n|                   SA|20181201|    806820240|          11|\n|                   SA|20181201|    806819765|          11|\n|                   FR|20181201|    806819642|          11|\n|                   US|20181201|    806820484|          11|\n|                   US|20181201|    806819766|          11|\n+---------------------+--------+-------------+------------+\nonly showing top 25 rows\n\ndfPays_Events2: org.apache.spark.sql.RelationalGroupedDataset = RelationalGroupedDataset: [grouping expressions: [GLOBALEVENTID: string, num_mentions: bigint ... 3 more field(s)], value: [GLOBALEVENTID: string, day: string ... 3 more fields], type: GroupBy]\n"}]}},{"text":"%md Processing of the data","user":"anonymous","dateUpdated":"2020-01-22T14:54:38+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Processing of the data</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1579704052244_-1870657348","id":"20200119-122641_344541628","dateCreated":"2020-01-22T14:40:52+0000","dateStarted":"2020-01-22T14:54:38+0000","dateFinished":"2020-01-22T14:54:38+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2084"},{"text":"    import org.apache.spark.sql.{DataFrame, SaveMode, SparkSession}\n\n    dfPays_Events\n      .write\n      .mode(SaveMode.Overwrite)\n      .parquet(\"s3://\" + s3_name + \"/dfPays_Events.parquet/\")","user":"anonymous","dateUpdated":"2020-01-22T15:28:13+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{"0":{"graph":{"mode":"table","height":325,"optionOpen":false}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.sql.{DataFrame, SaveMode, SparkSession}\n"}]},"apps":[],"jobName":"paragraph_1579704052244_-310225548","id":"20200117-102214_1513863359","dateCreated":"2020-01-22T14:40:52+0000","dateStarted":"2020-01-22T14:55:57+0000","dateFinished":"2020-01-22T14:56:28+0000","status":"PENDING","progressUpdateIntervalMs":500,"$$hashKey":"object:2085"},{"text":"%md Creation of Cassandra table ","user":"anonymous","dateUpdated":"2020-01-22T14:40:52+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1579704052245_281703374","id":"20200119-122701_546900147","dateCreated":"2020-01-22T14:40:52+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2086"},{"text":"%md Import of the dataframe data in Cassandra","user":"anonymous","dateUpdated":"2020-01-22T14:40:52+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1579704052246_-1806321443","id":"20200119-122733_569981743","dateCreated":"2020-01-22T14:40:52+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2087"}],"name":"gdeltQuery2","id":"2F25VZDEB","noteParams":{},"noteForms":{},"angularObjects":{"md:shared_process":[],"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}